# Packer Template: Ubuntu 24.04 LTS (Noble Numbat) vSphere template.
# Author: ahpooch
# Produced with materials from https://cloudmaniac.net and various sources.

# Variable definitions moved to './variables.pkr.hcl' file.
# Variables values should be set in './ubuntu-24.04.auto.pkrvars.hcl' and './credentials.auto.pkrvars.hcl' files.
# File 'credentials.auto.pkrvars.hcl.template' should be populated with correct values and renamed to 'credentials.auto.pkrvars.hcl'.

# Packer and plugins dependencies
packer {
required_version = " >= 1.12.0"
  required_plugins {
    name = {
      version = " >= v1.2.2"
      source  = "github.com/hashicorp/proxmox"
    }
  }
}

# Packer calculated variables (locals).
# /meta-data generated by concatinating absolute path with /data/meta-data
# /user-data generated by prerendering template at /data/user-data.pkrtpl.hcl
# pkrtpl.hcl templatefile reference: https://developer.hashicorp.com/packer/docs/templates/hcl_templates/functions/file/templatefile
locals {
  build_date = formatdate("YYYY-MM-DD hh:mm ZZZ", timestamp())
  vm_notes = "OS: ${var.os_name} (build by Packer on: ${local.build_date})"
  data_source_content = {
    "/meta-data" = file("${abspath(path.root)}/data/meta-data"),
    "/user-data" = templatefile("${abspath(path.root)}/data/user-data.pkrtpl.hcl", {
      guest_gecos              = var.guest_gecos
      guest_username           = var.guest_username
      guest_password           = var.guest_password
      guest_password_encrypted = var.guest_password_encrypted
      guest_ssh_key            = var.guest_ssh_key
      hostname                 = var.vm_name
      vm_guest_os_timezone     = var.vm_guest_os_timezone
    })
  }
}

# Source definition
source "proxmox-iso" "ubuntu" {
  # Proxmox settings
  proxmox_url = var.proxmox_api_url
  insecure_skip_tls_verify = var.proxmox_insecure_connection
  node = var.proxmox_node_name
  username = var.proxmox_api_token_id
  token = var.proxmox_api_token_secret

  # Virtual machine settings
  vm_id = var.vm_id
  vm_name = var.vm_name
  os = var.vm_os_type
  cores = var.vm_cpu_size
  memory = var.vm_ram_size
  tags = var.vm_tags
  template_description = local.vm_notes

  ### VM disk settings
  scsi_controller = "virtio-scsi-pci"
  disks {
    disk_size = "${var.vm_disk_size}G"
    format = var.vm_disk_format
    storage_pool = var.vm_disk_storage_pool
    type = var.vm_disk_controller_type
  }
  
  ### VM network settings
  network_adapters {
    model = "virtio"
    bridge = "vmbr0"
    firewall = "false"
  }
 
  # Template VM Cloud-Init settings
  cloud_init = true
  # Name of the Proxmox storage pool to store the Cloud-Init CDROM on. If not given, the storage pool of the boot device will be used.
  cloud_init_storage_pool = var.vm_disk_storage_pool 

  # We need to serve prerendered template `user-data.pkrtpl.hcl`, so we use http_content directive and not http_directory
  # See the definition of `local.data_source_content` at the locals{} block to understand it's structure and passed variables.
  http_content            = local.data_source_content
  
  # Fix for Packer .HTTPIP Issue
  ############## Packer .HTTPIP Issue ##############################################################################################################
  # Packer has some flaws ralating boot_command when you running packer on windows.                                                                #
  # Variable {{ .HTTPIP }} in boot_command may be calculated wrong and prevent Packer from providing it's right IP to the VM.                      #
  # By default Packer chose first non-loop network interface on system and sometimes the resulting IP in {{ .HTTPIP }} leads autoinstall to fail.  #
  # It often caused by presence of some additional adapter like vEthernet (used by WSL or Hyper-V) or some VPN clients installed on system.        #
  # You could read more here: https://github.com/hashicorp/packer/issues/10168                                                                     #
  # To eliminate this issue you could use http_interface parameter in configuration like this: http_interface = "Ethernet".                        #
  ##################################################################################################################################################
  http_interface          = "Ethernet"
  # You could set desired port range that Packer will be using to run its http service.
  http_port_min           = 8802
  http_port_max           = 8802

  # Boot Iso settings
  boot_iso {
    type = "scsi"
    iso_download_pve = true
    iso_storage_pool = "local"
    iso_url          = var.iso_url
    iso_checksum     = var.iso_checksum
    # You could see some errors while building template, where Proxmox can't unmount iso, but in the end it will be unmounted.
    unmount          = true
  }
  # Increase the task timeout to allow enough time for a large ISO download. https://github.com/hashicorp/packer-plugin-proxmox/issues/313
  task_timeout = "10m"
  # Enable qemu agent on VM settings
  qemu_agent = true

  # This boot_command is pretty optimal, compared to others, present on the internet.
  # It uses `c` to fill boot command string from scratch. Hence we don't need to spam backspace to clear boot string.
  # cloud-config-url= command allow Cloud-Init to run correctly and corresponding file will be saved at /etc/cloud/cloud.cfg.d/*kernel_cmdline_url.cfg.
  # We will remove this file later using `./scripts/cleanup.sh` in provisioning stage.
  boot_command = [
    "c<wait>", "linux /casper/vmlinuz --- ",
    "autoinstall cloud-config-url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/user-data <wait>",
    # alternative popular boot string: "autoinstall ds='nocloud-net;seedfrom=http://{{ .HTTPIP }}:{{ .HTTPPort }}/'",
    "<enter><wait>", "initrd /casper/initrd", 
    "<enter><wait>", "boot",
    "<enter>"
  ]
  # Parameter `boot_wait` is critical for successful operation of `boot_command`.
  # If `boot_wait` is too high or too low then `boot_command` will not be send at the right time and cloud-init will not start.
  boot_wait = "3s"

  # SSH Settings
  # Reference: https://developer.hashicorp.com/packer/docs/communicators/ssh
  communicator = "ssh"
  # Instead of username and password here we could use ssh_private_key_file = "~/.ssh/id_rsa"
  ssh_username = var.guest_username
  ssh_password = var.guest_password
  # How long Packer will wait for ssh connection to be established.
  ssh_timeout  = "30m"
}

# Building template
build { 
  sources = ["source.proxmox-iso.ubuntu"]

  # Popular build fix: Waiting for Clout-Init to finish
  provisioner "shell" {
    inline = [
      "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done"
    ]
  }
  
  # Using breakpoint provisioner. Uncomment next lines for debugging.
  # provisioner "breakpoint" {
  #     disable = false
  #     note    = "this is a breakpoint"
  # }

  # The scripts will be uploaded and executed in the order specified.
  # Each script is executed in isolation, so state such as variables from one script won't carry on to the next.
  provisioner "shell" {
    execute_command = "echo '${var.guest_password}' | sudo -S env {{ .Vars }} {{ .Path }}"
    scripts = [
      "./scripts/cleanup.sh",
      "./scripts/create_reconfigure-openssh-server.service.sh"
    ]
  }
}